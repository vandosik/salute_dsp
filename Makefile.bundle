export CPULIST=arm
null :=
space := ${null} ${null}

LIST_DIR = $(shell find $(1) -mindepth 1 -maxdepth 1 -type d -printf "$(2) \"%p$(3)\" ")

EXCLUDE_TAR := $(call LIST_DIR,src/hardware,--exclude) \
	$(call LIST_DIR,src/lib,--exclude) \
	$(call LIST_DIR,src/utils,--exclude)

# EXCLUDE_ZIP := $(call LIST_DIR,src/hardware,-x,"/*") \
# 	$(call LIST_DIR,src/lib,-x,"/*") \
# 	$(call LIST_DIR,src/utils,-x,"/*")

EXCLUDE_ZIP := "src/hardware/devu/*" "src/hardware/devg/*"

all: prebundle
	@echo done

strip:
	$(info Strip binary files)
	$(eval distrib_files := $(shell find $(target)))
# 	@echo distrib_Files=$(distrib_files)
	$(eval strip_status := $(shell for distr_file in $(shell ls $(distrib_files)); do \
		if file $$distr_file | grep 'ELF\|ar archive' >/dev/null; then \
		nto$(arch)-strip --strip-unneeded -p $$distr_file; fi; done; echo -n $$?))
	@if [ $(strip_status) -eq 0 ]; then \
		echo Strip done; \
	else \
		echo Strip fail; \
	fi

clean_src:
	@echo -n "Removing SRCVERSION tags from source files... "
	@find . -type f \( -iname '*.[chsS]' -o -iname '*.[ch]pp' -o -iname '*.cc' \
		-o -iname '*.[ly]' -o -iname 'trace.h.unuse' \) \
		! -name 'srcversion.h' -print | \
	while read fil; do \
		unifdef -U__USESRCVERSION "$${fil}" > /dev/shm/clean_srcversion 2>/dev/null; \
		[ $$? -eq 1 ] && mv /dev/shm/clean_srcversion "$${fil}"; \
		sed -i -e 's/.*__SRCVERSION.*//' -e 's/#include\s*<sys\/srcversion\.h>.*//' "$${fil}"; \
	done
	@echo "done!"

	@echo -n "Removing DNM sources... "
	@find . -type f -name 'Makefile.dnm' -execdir sh -c 'rm -rf "$$PWD"' 2>/dev/null \; || true
	@echo -n "done!"

prebundle:
	@[ -e $(BUILD_DIR) ] || mkdir -p $(BUILD_DIR)
	@rsync --exclude='$(BSP_DIR)' --exclude='.git' --exclude='.gitignore' -a $(BSP_DIR)/ $(BUILD_DIR)/$(BSP_BLD) || exit 1
	$(MAKE) -C $(BUILD_DIR)/$(BSP_BLD) -f Makefile.bundle bundle || exit 1
	rm -rf $(BUILD_DIR)/$(BSP_BLD)

bundle:
	@$(foreach skel, $(SKEL_BUILDFILES), ./unifdef.sh $(skel) $(dir $(skel))/ksz-mmc$(basename $(notdir $(skel))) ksz mmc;)
	@$(foreach skel, $(SKEL_BUILDFILES), ./unifdef.sh $(skel) $(dir $(skel))/ksz-nand$(basename $(notdir $(skel))) ksz nommc;)
	@$(foreach skel, $(SKEL_BUILDFILES), ./unifdef.sh $(skel) $(dir $(skel))/mmc$(basename $(notdir $(skel))) noksz mmc;)
	@$(foreach skel, $(SKEL_BUILDFILES), ./unifdef.sh $(skel) $(dir $(skel))/nand$(basename $(notdir $(skel))) noksz nommc;)
	@$(foreach board, $(BOARDS_PATH), $(if $(filter $(board), $(PACK_BOARDS_PATH)), , touch $(board)/Makefile.dnm;))

	$(MAKE) -f Makefile.bundle clean_src

	$(MAKE) -C. -f Makefile clean
	$(MAKE) -C. -f Makefile all
	$(MAKE) -C. -f Makefile.bundle strip target=install arch=armv7
	$(MAKE) -Cimages -f Makefile clean
	
	@echo Create 'binary' BSP
	@mkdir $(BUILD_DIR)/$(BSP_NAME) 
	@cp -ar install/* prebuilt/
	@cp -ar install prebuilt images src Makefile $(BUILD_DIR)/$(BSP_NAME)
	$(MAKE) -C$(BUILD_DIR)/$(BSP_NAME)/images clean_all build_all
	@cd $(BUILD_DIR)/$(BSP_NAME)/images; sed -i -e '/build_all\|clean_all\|BUILDFILES/,+2 d' Makefile
	@cd $(BUILD_DIR)/$(BSP_NAME)/images; sed -i -e 's/el24d1/$(word 2, $(subst -, ,$(PACK_BOARDS)))/g' Makefile
	@cd $(BUILD_DIR)/$(BSP_NAME)/install; rm -rf usr
	@cd $(BUILD_DIR); tar --owner=root --group=root --exclude='.gitignore' $(EXCLUDE_TAR) -zcf $(BUILD_DIR)/$(BNAME) $(BSP_NAME)
	@rm -rf $(BUILD_DIR)/$(BSP_NAME)

	@echo Cleanup and create 'source' BSP
	@cd install; $(foreach prebuilt, $(PREBUILT), find . -iname $(prebuilt) -exec cp -v --parents {} ../prebuilt \; ;)
	$(MAKE) -C. -f Makefile clean
	rm images/*.build
	@mkdir $(BUILD_DIR)/$(BSP_NAME)
	@cp -ar src install prebuilt images Makefile source.xml $(BUILD_DIR)/$(BSP_NAME)
	@cd $(BUILD_DIR)/$(BSP_NAME)/images; sed -i -e '/build_all\|clean_all\|BUILDFILES/,+2 d' Makefile
	@cd $(BUILD_DIR)/$(BSP_NAME)/images; sed -i -e 's/el24d1/$(word 2, $(subst -, ,$(PACK_BOARDS)))/g' Makefile
	-cd $(BUILD_DIR)/$(BSP_NAME); sed -i -e 's|id=".*"|id="$(BSP_NAME)"|' -e 's|<title>.*</title>|<title>$(BSP_NAME)</title>|' source.xml
	cd $(BUILD_DIR)/$(BSP_NAME); zip -FSr $(BUILD_DIR)/$(SNAME) * -x "*.skel" "*.gitignore" $(EXCLUDE_ZIP) $(addsuffix "/*", $(EXCL_BOARDS_PATH))

	@rm -rf $(BUILD_DIR)/$(BSP_NAME)
	@$(foreach skel, $(SKEL_BUILDFILES), rm -vf $(dir $(skel))/ksz-$(basename $(notdir $(skel)));)
	@$(foreach skel, $(SKEL_BUILDFILES), rm -vf $(dir $(skel))/$(basename $(notdir $(skel)));)
	@$(foreach board, $(BOARDS_PATH), $(if $(filter $(board), $(PACK_BOARDS_PATH)), ,rm -vf $(board)/Makefile.dnm;))
	@cd prebuilt; $(foreach prebuilt, $(PREBUILT), find . -iname $(prebuilt) -exec rm -vf {} \; ;)
	@echo done

BUILD_DIR:=$(PWD)/.build
SKEL_BUILDFILES:=$(shell ls src/hardware/startup/boards/1892vm14/salute-el24*/*.build.skel)
PREBUILT:=devu-dwcotg.so devg-vpoutfb.so
PACK_BOARDS?=salute-el24d1 salute-el24om1
AVAIL_BOARDS:=salute-el24d1 salute-el24om1
BOARDS_PATH:=$(addprefix src/hardware/startup/boards/1892vm14/, $(AVAIL_BOARDS))
PACK_BOARDS_PATH:=$(addprefix src/hardware/startup/boards/1892vm14/, $(PACK_BOARDS))
EXCL_BOARDS_PATH:=$(filter-out $(PACK_BOARDS_PATH), $(BOARDS_PATH))
BSP_NAME?=bsp-kpda-elvees-$(if $(filter-out $(PACK_BOARDS),$(AVAIL_BOARDS)),$(subst ${space},"_",$(PACK_BOARDS)),salute)
BSP_DIR:=$(PWD)
BSP_BLD:=$(BSP_NAME)-bld-`date +%Y%m%d`
BNAME=$(BSP_NAME)-bin-`date +%Y%m%d`.tar.gz
SNAME=$(BSP_NAME)-src-`date +%Y%m%d`.zip

